{"version":3,"sources":["components/Navbar/Navbar.js","components/Color/Color.js","components/Answers/Answers.js","components/Notification/Notification.js","components/App/App.js","index.js"],"names":["Navbar","score","topScore","showScores","className","Color","rgb","correct","style","backgroundColor","red","green","blue","Answers","colors","handleClick","map","color","key","Math","random","onClick","Notification","play","App","useState","setColors","renderColor","setRenderColor","showGame","setShowGame","showNotification","setShowNotification","setScore","setTopScore","generateColors","generatedColors","i","floor","randomIndex","ReactDOM","render","document","getElementById"],"mappings":"+RAkCeA,G,WA/BA,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WACjC,OACE,yBAAKC,UAAU,UACb,yBAAKA,UAAU,QACb,0BAAMA,UAAU,YAAhB,OAGA,0BAAMA,UAAU,cAAhB,SAGA,0BAAMA,UAAU,aAAhB,SAKAD,EAEA,yBAAKC,UAAU,UACb,yBAAKA,UAAU,aAAf,cACcF,GAEd,yBAAKE,UAAU,SAAf,UACUH,IAGX,MCdMI,G,MAXD,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,IAAmB,EAAdC,QAEpB,OACE,yBACEC,MAAO,CAACC,gBAAgB,OAAD,OAASH,EAAII,IAAb,YAAoBJ,EAAIK,MAAxB,YAAiCL,EAAIM,KAArC,MACvBR,UAAU,gBCeDS,G,MApBC,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,YAazB,OACE,yBAAKX,UAAU,WAXCU,EAAOE,KAAI,SAAAC,GAAK,OAAK,yBACGC,IAAKC,KAAKC,SACVC,QAAS,kBAAMN,EAAYE,IAC3Bb,UAAU,UAHb,SAKQa,EAAMP,IALd,KAKqBO,EAAMN,MAL3B,KAKoCM,EAAML,KAL1C,WCY1BU,G,MAfM,SAAC,GAAe,IAAbC,EAAY,EAAZA,KACtB,OACE,yBAAKnB,UAAU,gBACb,4BAAQA,UAAU,eAAlB,6EAGA,4BACEA,UAAU,cACViB,QAAS,kBAAIE,MAFf,WC8ESC,EAhFH,WAAO,IAAD,EAEYC,mBAAS,MAFrB,mBAETX,EAFS,KAEDY,EAFC,OAGsBD,mBAAS,MAH/B,mBAGTE,EAHS,KAGIC,EAHJ,OAIgBH,oBAAS,GAJzB,mBAITI,EAJS,KAICC,EAJD,OAKgCL,oBAAS,GALzC,mBAKTM,EALS,KAKSC,EALT,OAMUP,mBAAS,GANnB,mBAMTxB,EANS,KAMFgC,EANE,OAOgBR,mBAAS,GAPzB,mBAOTvB,EAPS,KAOCgC,EAPD,KASVC,EAAiB,WAErB,IAEMC,EAFgB,CAAC,GAAI,GAAI,IAEOpB,KAAI,SAAAqB,GAKxC,OAJAA,EAAE3B,IAAMS,KAAKmB,MAAsB,IAAhBnB,KAAKC,UACxBiB,EAAE1B,MAAQQ,KAAKmB,MAAsB,IAAhBnB,KAAKC,UAC1BiB,EAAEzB,KAAOO,KAAKmB,MAAsB,IAAhBnB,KAAKC,UACzBiB,EAAE9B,SAAU,EACL8B,KAGHE,EAAcpB,KAAKmB,MAAsB,EAAhBnB,KAAKC,UACpCgB,EAAgBG,GAAahC,SAAU,EAEvCmB,EAAUU,GACVR,EAAeQ,EAAgBG,IAC/BT,GAAY,GACZE,GAAoB,IAsBtB,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,CACEH,MAAOA,EACPC,SAAUA,EACVC,WAAY0B,IAEbE,EACG,kBAAC,EAAD,CAAcR,KAAMY,IACpB,GAGFN,EACI,6BACE,kBAAC,EAAD,CACEvB,IAAK,CAAEI,IAAKiB,EAAYjB,IACjBC,MAAOgB,EAAYhB,MACnBC,KAAMe,EAAYf,QAE3B,kBAAC,EAAD,CACEE,OAAQA,EACRC,YAxCY,SAAEE,GAEtBA,EAAMV,SAER0B,EAAShC,EAAM,GACfkC,MAIIlC,EAAQC,GACVgC,EAAYjC,GAGdgC,EAAS,GACTE,SA6BM,KC5EZK,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.81a821f7.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Navbar.css'\r\n\r\nconst Navbar = ({ score, topScore, showScores }) => {\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <div className=\"logo\">\r\n        <span className=\"logo-red\">\r\n          red\r\n        </span>\r\n        <span className=\"logo-green\">\r\n          green\r\n        </span>\r\n        <span className=\"logo-blue\">\r\n          blue\r\n        </span>\r\n      </div>\r\n      { \r\n        showScores \r\n        ?\r\n        <div className=\"scores\">\r\n          <div className=\"top-score\">\r\n            top score: {topScore}\r\n          </div>\r\n          <div className=\"score\">\r\n            score: {score}\r\n          </div>\r\n        </div>\r\n        :''\r\n      } \r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar","import React from 'react'\r\nimport './Color.css'\r\n\r\nconst Color = ({ rgb, correct }) => {\r\n  \r\n  return (\r\n    <div \r\n      style={{backgroundColor: `rgb(${rgb.red},${rgb.green},${rgb.blue})`}}\r\n      className=\"color-box\"\r\n    >\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Color","import React from 'react'\r\nimport './Answers.css'\r\n\r\nconst Answers = ({ colors, handleClick }) => {\r\n  \r\n  const renderAnswers = () => {\r\n    const answers = colors.map(color =>  <div \r\n                                            key={Math.random()}\r\n                                            onClick={() => handleClick(color)}\r\n                                            className=\"answer\"\r\n                                         >\r\n                                          rgb: ({color.red}, {color.green}, {color.blue})\r\n                                        </div>)\r\n    return answers\r\n  }\r\n  \r\n  return (\r\n    <div className=\"answers\">\r\n      {renderAnswers()}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Answers","import React from 'react'\r\nimport './Notification.css'\r\n\r\nconst Notification = ({ play } ) => {\r\n  return (\r\n    <div className=\"notification\">\r\n      <header className=\"message-box\">\r\n        In this game you need to guess the color in rgb value from three options.  \r\n      </header>\r\n      <button \r\n        className=\"play-button\"\r\n        onClick={()=>play()}>\r\n          Play\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Notification","import React, { useState } from 'react';\nimport './App.css';\nimport Navbar from '../Navbar/Navbar'\nimport Color from '../Color/Color'\nimport Answers from '../Answers/Answers'\nimport Notification from '../Notification/Notification'\n\nconst App = () => {\n\n  const [colors, setColors] = useState(null)\n  const [renderColor, setRenderColor] = useState(null)\n  const [showGame, setShowGame] = useState(false)\n  const [showNotification, setShowNotification] = useState(true)\n  const [score, setScore] = useState(0)\n  const [topScore, setTopScore] = useState(0)\n\n  const generateColors = () => {\n    \n    const initialColors = [{}, {}, {}]\n\n    const generatedColors = initialColors.map(i => {\n      i.red = Math.floor(Math.random() * 256)\n      i.green = Math.floor(Math.random() * 256)\n      i.blue = Math.floor(Math.random() * 256)\n      i.correct = false\n      return i\n    })\n\n    const randomIndex = Math.floor(Math.random() * 3)\n    generatedColors[randomIndex].correct = true\n\n    setColors(generatedColors)\n    setRenderColor(generatedColors[randomIndex])\n    setShowGame(true)\n    setShowNotification(false)\n  }\n\n  const handleButtonClick = ( color ) => {\n    \n    if (color.correct) {      \n      \n      setScore(score+1)\n      generateColors()\n\n    } else {\n\n      if (score > topScore) {\n        setTopScore(score)\n      }\n      \n      setScore(0)\n      generateColors()\n\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Navbar \n        score={score} \n        topScore={topScore} \n        showScores={showGame}\n      />\n      {showNotification \n        ? <Notification play={generateColors}/> \n        : ''\n      }      \n      {\n        showGame \n          ? <div>\n              <Color \n                rgb={{ red: renderColor.red,\n                       green: renderColor.green,\n                       blue: renderColor.blue }}\n              />\n              <Answers \n                colors={colors}\n                handleClick={handleButtonClick}\n              />\n            </div>\n          : ''\n      }\n\n    </div>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}